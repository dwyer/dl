#!/usr/bin/env python
# -*-coding:utf-8-*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import argparse
import contextlib
import datetime
import multiprocessing
import os
import re
import sys
import threading
import urllib2
import urlparse

from bs4 import BeautifulSoup
from concurrent import futures

# CONFIG
DEFAULT_SAVE_DIR = os.path.join(os.environ['HOME'], 'dlpy')
DEFAULT_FILTER = r'\.(gif|jpe?g|png|webm)$'
DEFAULT_RENAMING_MASK = '*flatcurl*/*name*.*ext*'
MAX_WORKERS = multiprocessing.cpu_count() * 2 + 1

try:
    import html5lib  # noqa: F401
    HTML_PARSER = 'html5lib'
except ImportError:
    HTML_PARSER = 'html.parser'

# PRINT FUNC

_print = print
print_lock = threading.Lock()


def print(*args, **kwargs):
    with print_lock:
        _print(*args, **kwargs)


# RENAMING MASK #

RENAMING_MASK_DELIM = '*'
NOW = datetime.datetime.now()


def mask_curl(url):
    url_parts = urlparse.urlparse(url)
    dirname, _ = os.path.split(url_parts.path)
    return url_parts.netloc + dirname


def mask_flatcurl(url):
    return mask_curl(url).replace('/', '-')


def mask_name(url):
    url_parts = urlparse.urlparse(url)
    _, name = os.path.split(url_parts.path)
    name, _ = os.path.splitext(name)
    return name


def mask_ext(url):
    url_parts = urlparse.urlparse(url)
    _, ext = os.path.splitext(url_parts.path)
    if ext.startswith('.'):
        ext = ext[1:]
    return ext


_mask_num_counter = 0


def mask_num(_):
    global _mask_num_counter
    _mask_num_counter += 1
    return str(_mask_num_counter)


RENAMING_MASKS = {
    'curl': mask_curl,
    'ext': mask_ext,
    'flatcurl': mask_flatcurl,
    'name': mask_name,
    'url': lambda url: urlparse.urlparse(url).netloc,
    'subdirs': lambda url: os.path.dirname(urlparse.urlparse(url).path),
    'y': lambda _: NOW.strftime('%y'),
    'm': lambda _: NOW.strftime('%m'),
    'd': lambda _: NOW.strftime('%d'),
    'hh': lambda _: NOW.strftime('%H'),
    'mm': lambda _: NOW.strftime('%M'),
    'date': str(NOW.date()),
    'time': str(NOW.time()),
    'datetime': NOW,
    'datetime_iso': NOW.isoformat(),
    'text': lambda _: 'click here to download',
    'num': mask_num,
}


def maskparse(mask):
    if not mask:
        return []
    if RENAMING_MASK_DELIM not in mask:
        return [mask]
    if mask.startswith(RENAMING_MASK_DELIM):
        i = mask[1:].find(RENAMING_MASK_DELIM)
        if i < 0:
            raise Exception('invalid mask: %r' % mask)
        i += 1
        sub = mask[1:i]
        sub = RENAMING_MASKS[sub]
        res = [sub]
        res.extend(maskparse(mask[i + 1:]))
        return res
    i = mask.find(RENAMING_MASK_DELIM)
    res = [mask[:i]]
    res.extend(maskparse(mask[i:]))
    return res


def maskfunc(mask):
    parts = maskparse(mask)
    return lambda url: ''.join(c(url) if callable(c) else c for c in parts)


# END RENAMING MASK

USER_AGENT = ('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) '
              'AppleWebKit/537.36 (KHTML, like Gecko) '
              'Chrome/52.0.2743.116 Safari/537.36')


def urlopen(url, user_agent=USER_AGENT):
    """Opens URL with spoofed user-agent"""
    request = urllib2.Request(url)
    request.add_header('User-Agent', user_agent)
    return contextlib.closing(urllib2.urlopen(request))


def download(url, path):
    try:
        with urlopen(url) as response:
            content = response.read()
    except urllib2.HTTPError as e:
        print(e, file=sys.stderr)
        return None
    try:
        os.makedirs(os.path.dirname(path))
    except OSError:
        pass
    with open(path, 'wb') as fp:
        fp.write(content)
    return path


def get_urls(url):
    try:
        with urlopen(url) as response:
            content = response.read()
    except urllib2.URLError as e:
        print(e, file=sys.stderr)
        return
    soup = BeautifulSoup(content, HTML_PARSER)
    for link in soup.find_all('a'):
        try:
            rel_url = link['href']
        except KeyError:
            continue
        yield urlparse.urljoin(url, rel_url)


def dl(url,
       filter=None,
       prefix=None,
       renaming_mask=None,
       save_dir=None,
       verbose=False,
       dryrun=False,
       depth=0,
       ignore=None):
    if ignore is None:
        ignore = set()
    filter = filter or DEFAULT_FILTER
    renaming_mask = renaming_mask or DEFAULT_RENAMING_MASK
    renaming_func = maskfunc(renaming_mask)
    save_dir = save_dir or DEFAULT_SAVE_DIR
    file_filter_regex = re.compile(filter, re.IGNORECASE)
    with futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        for abs_url in get_urls(url):
            if abs_url in ignore:
                continue
            _, filename = os.path.split(urlparse.urlparse(abs_url).path)
            if file_filter_regex.search(filename) is None:
                if depth > 0:
                    ignore.add(abs_url)
                    print('following', abs_url, file=sys.stderr)
                    executor.submit(
                        dl,
                        abs_url,
                        filter=filter,
                        prefix=prefix,
                        renaming_mask=renaming_mask,
                        save_dir=save_dir,
                        verbose=verbose,
                        dryrun=dryrun,
                        depth=depth - 1,
                        ignore=ignore)
                elif verbose:
                    print('ignoring', abs_url, file=sys.stderr)
                continue
            ignore.add(abs_url)
            name = renaming_func(abs_url)
            if prefix:
                name = os.path.join(prefix, name)
            path = os.path.join(save_dir, name)
            if os.path.exists(path):
                print('skipping', abs_url, file=sys.stderr)
                print(path)
            else:
                print('saving', abs_url, file=sys.stderr)
                if dryrun:
                    print(path)
                else:
                    future = executor.submit(download, abs_url, path)
                    future.add_done_callback(
                        lambda future: print(future.result()))


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('url')
    arg_parser.add_argument('--depth', type=int, default=0)
    arg_parser.add_argument('--filter', default=None)
    arg_parser.add_argument('--prefix', default=None)
    arg_parser.add_argument('--renaming_mask', default=None)
    arg_parser.add_argument('--save_dir', default=None)
    arg_parser.add_argument('--verbose', action='store_true')
    arg_parser.add_argument('--dryrun', action='store_true')
    args = vars(arg_parser.parse_args())
    dl(**args)


if __name__ == '__main__':
    main()
